import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

import { fetchCorsProxy } from "@renderer/utils/Utils";
import { LOADING_STATE } from "../../constants/Constants";
import { RootState } from "../../store";
import { TeamfightTacticsState } from "./types/TeamfightTacticsState";
import { TftMetasrc } from "./types/TftMetasrc";

const METASRC_URL = "https://www.metasrc.com/search/tft/tft";

const initialState: TeamfightTacticsState = {
  tftMetasrcDataStatus: LOADING_STATE.IDLE,
  tftMetasrcData: [],
};

/**
 * Fetch TFT data from metasrc.com.
 */
export const fetchMetasrcData = createAsyncThunk("teamfightTactics/fetchMetasrcData", async () => {
  const response = await fetchCorsProxy(METASRC_URL);
  const responseText = await response.text();
  const responseJson = JSON.parse(responseText);
  return responseJson;
});

export const teamfightTacticsSlice = createSlice({
  name: "teamfightTactics",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchMetasrcData.pending, (state) => {
        state.tftMetasrcDataStatus = LOADING_STATE.LOADING;
      })
      .addCase(fetchMetasrcData.fulfilled, (state, action) => {
        state.tftMetasrcDataStatus = LOADING_STATE.COMPLETE;
        state.tftMetasrcData = action.payload;
      })
      .addCase(fetchMetasrcData.rejected, (state) => {
        state.tftMetasrcDataStatus = LOADING_STATE.FAILED;
      });
  },
});

export const selectTftMetasrcDataStatus = (state: RootState): LOADING_STATE =>
  state.teamfightTactics.tftMetasrcDataStatus;
export const selectTftMetasrcData = (state: RootState): TftMetasrc[] => state.teamfightTactics.tftMetasrcData;

export const teamfightTacticsReducer = teamfightTacticsSlice.reducer;
